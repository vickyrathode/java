//a
interface Compute{
 double convert(double value);
}
class KilobyteToGigabyte implements Compute {
 public double convert(double kilobyte){
 return kilobyte / Math.pow(1024,2);
 }
}
class EuroToRupees implements Compute {
 public double convert(double euros){
 return euros * 89.71;
 }
}
public class Convertion{
 public static void main(String[] args){
 Compute kilobyte = new KilobyteToGigabyte();
 Compute euros = new EuroToRupees();
 double kilobyteValue = 2048;
 double gigabyteValue = kilobyte.convert(kilobyteValue);
 System.out.println(+kilobyteValue+"kilobyte is eqaul to "
+gigabyteValue +" gigabyte" );

 double euroValue = 100;
 double rupeesValue = euros.convert(euroValue);
 System.out.println(+euroValue+" euros is equal to "+rupeesValue+" 
rupees." );
 }


 //b
 import java.util.Scanner;
public class Quatractic {
 
public static void main(String[] args)
 {
 Scanner input = new Scanner(System.in);
 System.out.println("enter the values for a,b and c in the quatratic");
 System.out.print("enter the value for a : ");
 double a = input.nextDouble();
 System.out.print("enter the value for b : ");
 double b = input.nextDouble();
 System.out.print("enter the value for c : ");
 double c = input.nextDouble();
 double formula = b*b-4*a*c;
 if(formula > 0){
 double root1 = (-b + Math.sqrt(formula))/(2*a);
 double root2 = (-b - Math.sqrt(formula))/(2*a);
 System.out.println("The quadratic equation has two real 
solutions:");
 System.out.println("Root 1: " + root1);
 System.out.println("Root 2: " + root2);
 }
 else if(formula == 0){
 double root1 = -b/(2*a);
 System.out.println("The quadratic equation has two real 
solutions:");
 System.out.println("Root : " + root1);
 }
 else {
 // No real solutions
System.out.println("The quadratic equation has no real 
solutions.");
 }
 input.close();
 }


///-cpublic class Fibo {
 public static void main(String[] args) {
 int n = 10; 
 System.out.println("Fibonacci Series (Recursive):");
 for (int i = 0; i < n; i++) {
 System.out.print(fibonacciRecursive(i) + " ");
 }
 System.out.println("\nFibonacci Series (Iterative):");
 for (int i = 0; i < n; i++) {
 System.out.print(fibonacciIterative(i) + " ");
 }
 }
 
public static int fibonacciRecursive(int n) {
 if (n <= 1) {
 return n;
 } else {
 return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
 }
 }
 
 public static int fibonacciIterative(int n) {
 if (n <= 1) {
 return n;
 }
 int fib = 1;
 int prevFib = 1;
 for (int i = 2; i < n; i++) {
 int temp = fib;
 fib += prevFib;
prevFib = temp;
 }
 return fib;
 }
}
